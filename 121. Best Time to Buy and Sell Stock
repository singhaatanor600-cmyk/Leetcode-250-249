class Solution {
    public int maxProfit(int[] prices) {
        int min=Integer.MAX_VALUE;
        int max=0;
        for(int price:prices){
            if(price<min){
                min=price;
            }
            else{
                max=Math.max(max,price-min);
            }
        }
        return max;
    }
}
//min = Integer.MAX_VALUE;: We initialize min to the highest possible integer value. This ensures that we’ll find the lowest price during the iteration through the array.

max = 0;: This is the initial value for the maximum profit, starting at zero.

Iterating through Prices:

for (int price : prices): This loop goes through each price in the input array (prices).

Updating Minimum Price:

if (price < min): If the current price is lower than the min, we update min to this price.

This step ensures that min always holds the lowest price we’ve encountered so far.

Calculating Maximum Profit:

else: When the current price is greater than or equal to min (i.e., it represents a potential sell day after a buy), we calculate the potential profit by subtracting min from the current price: price - min.

max = Math.max(max, price - min);: We update max to the larger value between the current max and the profit from this transaction (current price - min).//
